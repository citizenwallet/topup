"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/pYvLECH4ojt
 */

import React, { useEffect, useState } from "react";

import {
  CardTitle,
  CardHeader,
  CardContent,
  CardFooter,
  Card,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import useFaucet from "@/hooks/use-faucet";
function hasFees(pluginConfig, pkg) {
  if (pkg.stripe) {
    if (pkg.stripe.prices.fees) {
      return true;
    }
  } else if (pluginConfig.stripe && pluginConfig.stripe.prices.fees) {
    return true;
  }
  return false;
}

export function Packages({
  communitySlug,
  pluginConfig,
  accountAddress,
  redirectUrl,
}) {
  const { faucet, isLoading, isError } = useFaucet(communitySlug);
  const [formattedPackages, setFormattedPackages] = useState([]);
  const [isItemLoading, setIsItemLoading] = useState("");
  const router = useRouter();
  const faucetBalance = faucet && parseInt(faucet.balance);
  useEffect(() => {
    const newPackages = pluginConfig.packages
      .filter((pkg) => !pkg.hidden)
      .map((pkg) => {
        pkg.key = `${pkg.amount}-${pkg.buyUrl}`;
        if (pkg.currency) {
          pkg.formattedAmount = formatCurrency(
            (pkg.unitprice_in_cents * pkg.amount) / 100,
            pkg.currency,
            navigator.language
          );
          if (hasFees(pluginConfig, pkg)) {
            pkg.fees = formatCurrency(
              pkg.fees_in_cents / 100,
              pkg.currency,
              navigator.language
            );
          }
        }
        pkg.buyUrl = `/${communitySlug}/topup/${pkg.amount}`;
        return pkg;
      });
    setFormattedPackages(newPackages);
  }, [pluginConfig, communitySlug]);

  function formatCurrency(amount, currency, locale) {
    return new Intl.NumberFormat(locale || "en-US", {
      style: "currency",
      currency,
    }).format(amount);
  }

  function isSoldOut(pkg) {
    if (isLoading) return false;
    return pkg.amount > faucetBalance;
  }

  const handleClick = (href, itemId) => {
    setIsItemLoading(itemId);
    let goto = href;
    if (accountAddress) {
      goto += `?accountAddress=${accountAddress}&redirectUrl=${encodeURIComponent(
        redirectUrl
      )}`;
      console.log(">>> redirecting to", goto);
      router.push(goto);
    } else {
      console.error("No account address found");
    }
    return false;
  };

  return (
    <main className="flex flex-col items-center p-4">
      {formattedPackages.map((pkg) => (
        <Card className="w-full max-w-md mb-6" key={pkg.key}>
          <CardHeader>
            <CardTitle>{pkg.name}</CardTitle>
            <div className="text-sm text-gray-500">{pkg.description}</div>
          </CardHeader>
          {pkg.unitprice_in_cents > 0 && (
            <CardContent className="flex justify-between items-center">
              <div className="text-xl font-semibold">{pkg.formattedAmount}</div>
              {pkg.fees && (
                <div className="text-sm text-gray-500">+{pkg.fees} (fees)</div>
              )}
            </CardContent>
          )}
          <CardFooter>
            {pkg.key != isItemLoading && !isSoldOut(pkg) ? (
              <a
                className="cursor-pointer border border-gray-300 rounded-md p-3 dark:border-gray-600 block text-center py-2"
                onClick={() => handleClick(pkg.buyUrl, pkg.key)}
              >
                {pkg.buyUrl.match(/\/topup/) ? "Top Up" : "Buy Now"}
              </a>
            ) : (
              <Button
                className="border border-gray-300 rounded-md p-3 dark:border-gray-600 block text-center py-2"
                disabled
              >
                {isSoldOut(pkg)
                  ? "Sold Out"
                  : pkg.buyUrl.match(/\/topup/)
                  ? "Top Up"
                  : "Buy Now"}
              </Button>
            )}
          </CardFooter>
        </Card>
      ))}
    </main>
  );
}
