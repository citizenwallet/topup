"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/pYvLECH4ojt
 */

import React, { useEffect, useState } from "react";

import { useRouter } from "next/navigation";
import useFaucet from "@/hooks/use-faucet";
function hasFees(pluginConfig, pkg) {
  if (pkg.stripe) {
    if (pkg.stripe.prices.fees) {
      return true;
    }
  } else if (pluginConfig.stripe && pluginConfig.stripe.prices.fees) {
    return true;
  }
  return false;
}

export default function Packages({
  communitySlug,
  title,
  accountAddress,
  amounts,
  redirectUrl,
}) {
  const { faucet, isLoading, isError } = useFaucet(communitySlug);
  const [isItemLoading, setIsItemLoading] = useState(null);
  const [formattedPackages, setFormattedPackages] = useState([]);
  const router = useRouter();
  const faucetBalance = faucet && parseInt(faucet.balance);

  const [customAmount, setCustomAmount] = useState("");
  const [showCustom, setShowCustom] = useState(false);

  function formatCurrency(amount, currency, locale) {
    return new Intl.NumberFormat(locale || "en-US", {
      style: "currency",
      currency,
    }).format(amount);
  }

  function pkgState(pkg) {
    if (isLoading) return "loading";
    return pkg.amount > faucetBalance
      ? "sold out"
      : pkg.unitprice_in_cents
      ? pkg.formattedAmount
      : "";
  }

  const handleClick = (href, itemId) => {
    setIsItemLoading(itemId);
    let goto = href;
    if (accountAddress) {
      goto += `?accountAddress=${accountAddress}&title=${encodeURIComponent(
        title
      )}&redirectUrl=${encodeURIComponent(redirectUrl)}`;

      router.push(goto);
    } else {
      const localAccountAddress = window.localStorage.getItem("accountAddress");
      const localRedirectUrl = window.localStorage.getItem("redirectUrl");
      if (localAccountAddress && localRedirectUrl) {
        goto += `?accountAddress=${localAccountAddress}&redirectUrl=${encodeURIComponent(
          localRedirectUrl
        )}`;

        // cleanup
        window.localStorage.removeItem("accountAddress");
        window.localStorage.removeItem("redirectUrl");
        router.push(goto);
      } else {
        console.error("No account address found");
      }
    }
    return false;
  };

  const handleCustomSubmit = (e) => {
    e.preventDefault();
    const value = parseFloat(customAmount);
    if (value > 0) {
      // Use fractional amount (cents) for Stripe
      handleClick(
        `/${communitySlug}/topup/${Math.round(value * 100)}`,
        "custom"
      );
    }
  };

  const handleCustomChange = (e) => {
    const value = e.target.value;
    if (
      value === "" ||
      (/^\d*\.?\d{0,2}$/.test(value) && !isNaN(parseFloat(value)))
    ) {
      setCustomAmount(value);
    }
  };

  useEffect(() => {
    const formattedPackages = [];
    amounts.split(",").forEach((amount) => {
      if (amount.trim().toLowerCase() === "custom") {
        setShowCustom(true);
      } else {
        const value = parseInt(amount * 100);
        if (value > 0) {
          formattedPackages.push({
            key: amount,
            amount: parseFloat(amount).toFixed(2),
            unit: "EUR",
            formattedAmount: formatCurrency(
              value / 100,
              "EUR",
              navigator.language
            ),
            buyUrl: `/${communitySlug}/topup/${value}`,
          });
        }
      }
    });
    setFormattedPackages(formattedPackages);
  }, [amounts, communitySlug]);

  return (
    <main className="flex flex-col items-center p-4 max-w-96 mx-auto justify-center">
      {showCustom && (
        <form onSubmit={handleCustomSubmit} className="w-full mb-4">
          <div className="relative">
            <input
              type="number"
              inputMode="decimal"
              step="0.01"
              value={customAmount}
              onChange={handleCustomChange}
              placeholder="0.00"
              className="w-full p-2 text-3xl font-bold text-black border rounded-xl text-center"
            />
            {customAmount && (
              <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-lg text-black">
                EUR
              </span>
            )}
          </div>
          <button type="submit" className="sr-only">
            Submit
          </button>
        </form>
      )}
      <div className="flex flex-wrap justify-between w-full">
        {formattedPackages.map((pkg) => (
          <a
            key={pkg.key}
            className={`relative w-[48%] h-20 bg-grey-25 rounded-xl flex flex-col justify-center cursor-pointer ${
              (isLoading && "opacity-35") ||
              (isItemLoading && isItemLoading !== pkg.key && "opacity-35")
            } active:contrast-[0.9] my-2 ${
              isItemLoading === pkg.key && "packageButtonLoading"
            }`}
            onClick={() =>
              !isLoading && !isItemLoading && handleClick(pkg.buyUrl, pkg.key)
            }
          >
            <div className="text-purple-primary flex flex-row items-center mx-auto">
              <h2 className="font-bold text-2xl mr-1">{pkg.amount}</h2>
              <div className="text-sm">{pkg.unit}</div>
            </div>
            <div className="flex justify-center items-center">
              <div className="text-lg text-grey-350">{pkgState(pkg)}</div>
            </div>
          </a>
        ))}
      </div>
    </main>
  );
}
